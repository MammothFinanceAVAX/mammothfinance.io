{"version":3,"sources":["config/index.ts","components/layout/Flex.tsx","components/layout/Hero2.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","styled","div","Hero5","theme","mediaQueries","lg","Hero6","Wrapper","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","chainId","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","yourLiquidity","TranslateString","useI18n","liquidityUrlPathParts","justifyContent","href","process","external","NoFeeTag","variant","outline","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","size","useStake","pid","decimals","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onStake","useCallback","amount","a","console","log","stake","txHash","fetchFarmUserDataAsync","info","useUnstake","onUnstake","unstake","StyledSpacer","props","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onChange","onSelectMax","value","depositFeeBP","toLocaleString","Input","endAdornment","placeholder","times","toString","dec","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","undefined","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","onApprove","lpContract","approve","tx","useApprove","getContract","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","maximumFractionDigits","lpTotal","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","eggPerBlock","poolWeight","pow","comparedTo","Page","textAlign","exact"],"mappings":"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","file":"static/js/12.71205d26.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(31622400)\nexport const BSC_BLOCK_TIME = 1.2\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import styled from 'styled-components'\n\nexport const Hero2 = styled.div`\n    align-items: center;\n\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 0px;\n  padding-top: 126px;\n  font-weight:600;\n  text-align: center;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/banner2.png');\n    background-size:     cover;                 \n    background-repeat:   no-repeat;\n    background-position:  center;     \n    height: 241px;\n    padding-top: 0;\n  }\n`\n\nexport const Hero3 = styled.div`\n    align-items: center;\n\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 0px;\n  padding-top: 126px;\n  font-weight:600;\n  text-align: center;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/banner3.png');\n    background-size:     cover;                 \n    background-repeat:   no-repeat;\n    background-position:  center;     \n    height: 241px;\n    padding-top: 0;\n  }\n`\n\nexport const Hero4 = styled.div`\n    align-items: center;\n\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 0px;\n  padding-top: 126px;\n  font-weight:600;\n  text-align: center;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/banner4.png');\n    background-size:     cover;                 \n    background-repeat:   no-repeat;\n    background-position:  center;     \n    height: 241px;\n    padding-top: 0;\n  }\n`\n\nexport const Hero5 = styled.div`\n    align-items: center;\n\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 0px;\n  font-weight:600;\n  text-align: center;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/banner5.png');\n    background-size:     cover;                 \n    background-repeat:   no-repeat;\n    background-position:  center;     \n    height: 328px;\n    padding-top: 0;\n  }\n`\n\nexport const Hero6 = styled.div`\n    align-items: center;\n\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 0px;\n  font-weight:600;\n  text-align: center;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/banner6.png');\n    background-size:     cover;                 \n    background-repeat:   no-repeat;\n    background-position:  center;     \n    height: 328px;\n    padding-top: 0;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'AVAX' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n  yourLiquidity?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses, yourLiquidity\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={\n          // eslint-disable-next-line no-nested-ternary\n          isTokenOnly ?\n            `https://www.traderjoexyz.com/#/trade/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n             :\n          `https://www.traderjoexyz.com/#/pool/${liquidityUrlPathParts}`\n        }>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n       <>\n         <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\">\n            <Text>Your Liquidity:</Text>\n            <Text>~{yourLiquidity}</Text>\n          </Flex>\n       </>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on C-Chain Explorer')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline >\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n  showExchange?: boolean\n  exchange?: string\n  isTokenOnly?: boolean\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n  \n`\n\nconst ExchangeTag = styled(Tag)`\n  margin-left: 4px;\n  margin-top:4px;\n`\n\nconst QuickswapTag = styled(Tag)`\n  margin-left: 4px;\n  margin-top:4px;\n  border: 2px solid #232D6F;\n  color:#232D6F;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n  isTokenOnly\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"13px\" size=\"LG\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number, decimals?:number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n        console.log('decimals', 18)\n      const txHash = await stake(masterChefContract, pid, amount, account, decimals || 18)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid, decimals],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number, decimals ?:number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account, decimals || 18)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid, decimals],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst dec = {\n    'GB': 9,\n    'USDC.e': 6,\n    'USDT.e': 6,\n    'DAI.e': 18,\n    'WBTC.e': 8,\n    'USDC.E': 6,\n    'USDT.E': 6,\n    'DAI.E': 18,\n    'WBTC.E': 8,\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n\n\n    console.log('t', tokenName)\n    const fullBalance = useMemo(() => {\n        return getFullDisplayBalance(max, dec[tokenName] !== undefined ? dec[tokenName] : 18)\n    }, [max, tokenName])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst dec = {\n    'GB': 9,\n    'USDC.e': 6,\n    'USDT.e': 6,\n    'DAI.e': 18,\n    'WBTC.e': 8,\n    'USDC.E': 6,\n    'USDT.E': 6,\n    'DAI.E': 18,\n    'WBTC.E': 8,\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, dec[tokenName] !== undefined ? dec[tokenName] : 18)\n  }, [max, tokenName])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst dec = {\n  'GB': 9,\n  'USDC.e': 6,\n  'USDT.e': 6,\n  'DAI.e': 18,\n  'WBTC.e': 8,\n  'USDC.E': 6,\n  'USDT.E': 6,\n  'DAI.E': 18,\n  'WBTC.E': 8,\n}\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid, dec[tokenName] !== undefined ? dec[tokenName] : 18)\n  const { onUnstake } = useUnstake(pid, dec[tokenName] !== undefined ? dec[tokenName] : 18)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance, dec[tokenName] !== undefined ? dec[tokenName] : 18)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 3000 ?\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size='sm'\n            variant='secondary'\n            marginBottom='15px'\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake((rawEarningsBalance * 0.955).toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n          : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  // console.log(tokenBalance.toString())\n  // console.log('tokenBalance')\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n        <> <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n\n        </>\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          Tusk\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Tusk per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/pool/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n                                               lpLabel,\n                                               quoteTokenAdresses,\n                                               quoteTokenSymbol,\n                                               tokenAddresses,\n                                               cakePrice,\n                                               apy,\n                                             }) => {\n  const [onPresentApyModal] = useModal(\n      <ApyCalculatorModal\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n          cakePrice={cakePrice}\n          apy={apy}\n      />,\n  )\n\n  return (\n      <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n        <CalculateIcon />\n      </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\nimport {useFarmUser} from \"../../../../state/hooks\";\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg, #F7FDFF 0%, #fba80152 10%, #fbaa047a 50%, #F7FDFF 90%, #fba80170 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 3s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 16px;\n  position: relative;\n  text-align: center;\n  background-color: #fba8010f;;\n  border: 1px solid #FBA801;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account}) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n    const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(farm.pid)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n const yourLiquidity = totalValue && stakedBalance\n    ? `$${Number(new BigNumber(totalValue).times(stakedBalance.div(farm.lpTotal)).toFixed()).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'TUSK'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n    // console.log('farm')\n    // console.log(farm)\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\nconsole.log(farm)\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'TUSK' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n        isTokenOnly={farm.isTokenOnly}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n        { farm.pid > 2000 ? (\n                <Flex justifyContent='space-between'>\n                <Text style={{color: \"#31D0AA\"}}>Early LP Reward:</Text>\n                <Text style={{color: \"#31D0AA\"}} bold>20%</Text>\n                </Flex>\n            )\n            : (\n                <></>\n            )\n        }\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://cchain.explorer.avax.network/address/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://cchain.explorer.avax.network/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          yourLiquidity={yourLiquidity}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport {Hero2, Hero3, Hero5, Hero6} from 'components/layout/Hero2'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\n\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n      <>\n        <Page>\n          <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center'}}>\n            {\n              tokenMode ?\n                  TranslateString(10002, 'Stake tokens to earn TUSK')\n                  :\n                  TranslateString(320, 'Stake LP tokens to earn TUSK')\n            }\n          </Heading>\n          <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center', color: '#a5a2a2' }}>\n            {TranslateString(10000, 'Deposit Fee will be used to buyback TUSK')}\n          </Heading>\n          <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n          <div>\n            <Divider />\n            <FlexLayout>\n              <Route exact path={`${path}`}>\n                {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n              </Route>\n              <Route exact path={`${path}/history`}>\n                {farmsList(inactiveFarms, true)}\n              </Route>\n            </FlexLayout>\n          </div>\n\n        </Page>\n        {tokenMode ?\n            <Hero5>&nbsp;</Hero5>\n            : <Hero6>&nbsp;</Hero6>\n        }\n\n      </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}